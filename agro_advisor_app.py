import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import plotly.express as px
import time
import numpy as np

# Load dataset
df = pd.read_csv("crop_dataset.csv")

# Prepare features and labels
X = df[['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']]
y = df['label']

# Calculate model accuracy over multiple splits to find min, max, avg
accuracies = []
for seed in range(10):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=seed)
    temp_model = RandomForestClassifier()
    temp_model.fit(X_train, y_train)
    y_pred = temp_model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    accuracies.append(acc)

min_accuracy = np.min(accuracies)
max_accuracy = np.max(accuracies)
avg_accuracy = np.mean(accuracies)

# Train final model on full dataset
model = RandomForestClassifier()
model.fit(X, y)

# Crop diseases dictionary
crop_diseases = {
    "rice": ["Bacterial Leaf Blight", "Blast", "Brown Spot"],
    "maize": ["Downy Mildew", "Leaf Blight", "Rust"],
    "chickpea": ["Ascochyta Blight", "Fusarium Wilt"],
    "kidneybeans": ["Anthracnose", "Rust"],
    "pigeonpeas": ["Sterility Mosaic Disease", "Phytophthora Blight"],
    "mothbeans": ["Yellow Mosaic Virus", "Powdery Mildew"],
    "mungbean": ["Cercospora Leaf Spot", "Yellow Mosaic Virus"],
    "blackgram": ["Cercospora Leaf Spot", "Powdery Mildew"],
    "lentil": ["Rust", "Ascochyta Blight"],
    "banana": ["Panama Disease", "Sigatoka Leaf Spot"],
    "mango": ["Powdery Mildew", "Anthracnose"],
    "grapes": ["Downy Mildew", "Powdery Mildew"],
    "watermelon": ["Anthracnose", "Fusarium Wilt"],
    "muskmelon": ["Powdery Mildew", "Downy Mildew"],
    "apple": ["Apple Scab", "Powdery Mildew"],
    "orange": ["Citrus Canker", "Greening Disease"],
    "papaya": ["Papaya Ringspot Virus", "Powdery Mildew"],
    "coconut": ["Bud Rot", "Stem Bleeding"],
    "cotton": ["Bacterial Blight", "Wilt"],
    "jute": ["Stem Rot", "Anthracnose"],
    "coffee": ["Coffee Leaf Rust", "Coffee Berry Disease"],
}

# Translations dictionary
translations = {
    "title": {
        "en": "üåæ Adaptive Crop Forecasting System",
        "hi": "üåæ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡•Ä ‡§´‡§∏‡§≤ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä",
        "te": "üåæ ‡∞Ö‡∞®‡±Å‡∞ï‡±Ç‡∞≤ ‡∞™‡∞Ç‡∞ü ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡±ç‡∞•"
    },
    "input_label": {
        "en": "Enter the following environmental and soil parameters:",
        "hi": "‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§î‡§∞ ‡§Æ‡•É‡§¶‡§æ ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:",
        "te": "‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶‡∞ø ‡∞™‡∞∞‡±ç‡∞Ø‡∞æ‡∞µ‡∞∞‡∞£ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞™‡∞∞‡∞æ‡∞Æ‡∞ø‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø:"
    },
    "predict_btn": {
        "en": "Predict Best Crop",
        "hi": "‡§∏‡§∞‡•ç‡§µ‡§∂‡•ç‡§∞‡•á‡§∑‡•ç‡§† ‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§Ç",
        "te": "‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"
    },
    "top_recommendations": {
        "en": "üåü Top 5 Recommended Crops",
        "hi": "üåü ‡§∂‡•Ä‡§∞‡•ç‡§∑ 5 ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤‡•á‡§Ç",
        "te": "üåü ‡∞ü‡∞æ‡∞™‡±ç 5 ‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞™‡∞Ç‡∞ü‡∞≤‡±Å"
    },
    "chance": {
        "en": "Chance",
        "hi": "‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ",
        "te": "‡∞∏‡∞æ‡∞ß‡±ç‡∞Ø‡∞§"
    },
    "possible_diseases": {
        "en": "Possible Future Diseases",
        "hi": "‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡§æ‡§Å",
        "te": "‡∞∏‡∞Ç‡∞≠‡∞æ‡∞µ‡±ç‡∞Ø ‡∞≠‡∞µ‡∞ø‡∞∑‡±ç‡∞Ø‡∞§‡±ç ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤‡±Å"
    },
    "accuracy": {
        "en": "Model Accuracy Overview",
        "hi": "‡§Æ‡•â‡§°‡§≤ ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§Ö‡§µ‡§≤‡•ã‡§ï‡§®",
        "te": "‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞§‡±ç‡∞µ‡∞Ç ‡∞Ö‡∞µ‡∞≤‡±ã‡∞ï‡∞®‡∞Ç"
    },
    "loading_text": {
        "en": "Analyzing your input and calculating best crop recommendations...",
        "hi": "‡§Ü‡§™‡§ï‡•á ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§î‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
        "te": "‡∞Æ‡±Ä ‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç‚Äå‡∞®‡±Å ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞∏‡±ç‡∞§‡±Ç ‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡∞∏‡±Å‡∞≤‡∞®‡±Å ‡∞≤‡±Ü‡∞ï‡±ç‡∞ï‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ç..."
    },
    "interpretation": {
        "en": """**How to interpret:**
- The pie chart shows likelihood of each crop.
- The bar chart compares probabilities.
- Each crop card lists possible diseases.
- Accuracy based on historical data.""",
        "hi": """**‡§ï‡•à‡§∏‡•á ‡§∏‡§Æ‡§ù‡•á‡§Ç:**
- ‡§™‡§æ‡§à ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§¶‡§ø‡§ñ‡§§‡•Ä ‡§π‡•à‡•§
- ‡§¨‡§æ‡§∞ ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
- ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§´‡§∏‡§≤ ‡§ï‡§æ‡§∞‡•ç‡§° ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡§æ‡§Å ‡§π‡•à‡§Ç‡•§
- ‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§°‡•á‡§ü‡§æ ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à‡•§""",
        "te": """**‡∞µ‡∞ø‡∞µ‡∞∞‡∞£:**
- ‡∞™‡±à ‡∞ö‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞™‡∞Ç‡∞ü ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
- ‡∞¨‡∞æ‡∞∞‡±ç ‡∞ö‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞æ‡∞≤‡∞®‡±Å ‡∞™‡±ã‡∞≤‡±ç‡∞ö‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.
- ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞™‡∞Ç‡∞ü ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç‚Äå‡∞≤‡±ã ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡±Å‡∞≤ ‡∞ú‡∞æ‡∞¨‡∞ø‡∞§‡∞æ ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.
- ‡∞ñ‡∞ö‡±ç‡∞ö‡∞ø‡∞§‡∞§‡±ç‡∞µ‡∞Ç ‡∞ö‡∞æ‡∞∞‡∞ø‡∞§‡±ç‡∞∞‡∞ï ‡∞°‡±á‡∞ü‡∞æ‡∞™‡±à ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞™‡∞°‡∞ø ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø."""
    },
    "success_msg": {
        "en": "Use these insights to make informed decisions and monitor diseases to maximize yield! üå±",
        "hi": "‡§á‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•Ä ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç! üå±",
        "te": "‡∞à ‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞¨‡±Å‡∞¶‡±ç‡∞ß‡∞ø‡∞Æ‡∞Ç‡∞§‡∞Æ‡±à‡∞® ‡∞®‡∞ø‡∞∞‡±ç‡∞£‡∞Ø‡∞æ‡∞≤‡±Å ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞Ç‡∞ü‡∞≤ ‡∞™‡∞∞‡±ç‡∞Ø‡∞µ‡±á‡∞ï‡±ç‡∞∑‡∞£ ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø! üå±"
    }
}

# Language selector
lang = st.selectbox("Choose Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", ["English", "Hindi", "Telugu"])
lang_key = {"English": "en", "Hindi": "hi", "Telugu": "te"}[lang]
T = lambda key: translations[key][lang_key]

# UI
st.title(T("title"))
st.write(T("input_label"))

# Inputs
n = st.number_input("Nitrogen (N)", 0, 200, 50)
p = st.number_input("Phosphorous (P)", 0, 200, 50)
k = st.number_input("Potassium (K)", 0, 200, 50)
temperature = st.number_input("Temperature (¬∞C)", 0.0, 50.0, 25.0)
humidity = st.number_input("Humidity (%)", 0.0, 100.0, 60.0)
ph = st.number_input("Soil pH", 0.0, 14.0, 6.5)
rainfall = st.number_input("Rainfall (mm)", 0.0, 400.0, 200.0)

if st.button(T("predict_btn")):
    progress_text = T("loading_text")
    progress_bar = st.progress(0, text=progress_text)
    for percent_complete in range(0, 101, 10):
        time.sleep(0.05)
        progress_bar.progress(percent_complete, text=f"{progress_text} ({percent_complete}%)")
    progress_bar.empty()

    input_data = [[n, p, k, temperature, humidity, ph, rainfall]]
    proba = model.predict_proba(input_data)[0]
    crop_indices = proba.argsort()[::-1][:5]
    crops = model.classes_[crop_indices]
    probs = proba[crop_indices]

    st.markdown(f"<h2 style='color:#4CAF50;'>{T('top_recommendations')}</h2>", unsafe_allow_html=True)

    fig = px.pie(
        names=crops, values=probs,
        title="Top 5 Crop Recommendation Probabilities",
        color_discrete_sequence=px.colors.sequential.RdBu
    )
    fig.update_traces(textinfo='percent+label', pull=[0.1, 0.05, 0, 0, 0])
    st.plotly_chart(fig, use_container_width=True)

    st.markdown(f"<h4 style='color:#2196F3;'>Probability Bar Chart</h4>", unsafe_allow_html=True)
    st.bar_chart({"Crop": crops, "Probability": probs})

    for i, (crop, prob) in enumerate(zip(crops, probs)):
        with st.container():
            st.markdown(f"""
                <div style='background: linear-gradient(90deg, #e3ffe8 0%, #f9f9f9 100%);
                            border-radius: 12px; padding: 16px; margin-bottom: 10px; box-shadow: 0 2px 8px #b2f7ef;'>
                <h3 style='color:#388e3c;'>{i+1}. {crop.title()}</h3>
                <b>{T('chance')}:</b> <span style='color:#d84315;font-size:18px'>{prob*100:.2f}%</span><br>
                <b>{T('possible_diseases')}:</b>
            """, unsafe_allow_html=True)
            diseases = crop_diseases.get(crop, ["No data available"])
            for disease in diseases:
                st.markdown(f"- {disease}")
            st.markdown("</div>", unsafe_allow_html=True)

    st.markdown("---")
    st.markdown(f"<h4 style='color:#6a1b9a;'>{T('accuracy')}:</h4>", unsafe_allow_html=True)
    st.write(f"üîΩ Min Accuracy: {min_accuracy*100:.2f}%")
    st.write(f"üîº Max Accuracy: {max_accuracy*100:.2f}%")
    st.write(f"üìâ Avg Accuracy: {avg_accuracy*100:.2f}%")

    st.info(T("interpretation"))
    st.success(T("success_msg"))
